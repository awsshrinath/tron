from execution import get_market_data, place_order, log_trade
from config import STOCKS, DAILY_LOSS_LIMIT, INITIAL_CAPITAL, RISK_PER_TRADE
from strategy import hybrid_strategy
from vwap_strategy import vwap_strategy
from opening_range_strategy import opening_range_strategy
from nifty_filter import get_nifty_trend
from datetime import datetime
import time
import csv
import os

capital = INITIAL_CAPITAL
loss_today = 0
stop_loss_count = 0
MAX_STOP_LOSSES = 3
MAX_TRADES_PER_DAY = 3
trade_count = 0
open_positions = {}
TRAIL_SL_PERCENT = 0.5 / 100
MARKET_CLOSE_TIME = "15:18"
ENTRY_LOG = "entry_log.csv"

print("\nüìà Trading bot started with Nifty trend filter...")

# ‚úÖ Strategy priority: ORB until 9:45, then VWAP, then Hybrid
strategy_functions = [
    lambda stock: opening_range_strategy(stock, capital) if datetime.now().strftime('%H:%M') <= '09:45' else None,
    lambda stock: vwap_strategy(stock, capital) if datetime.now().strftime('%H:%M') > '09:45' else None,
    lambda stock: hybrid_strategy(stock, capital)
]

try:
    while True:
        now = datetime.now().strftime("%H:%M")

        if now >= MARKET_CLOSE_TIME:
            print("\nüîî 3:18 PM reached. Squaring off all open positions...")
            for stock, pos in list(open_positions.items()):
                try:
                    price, _, _ = get_market_data(stock)
                    if pos.get("active"):
                        place_order(stock, "SELL", pos["qty"], price)
                        result = "WIN" if price >= pos["entry"] else "LOSS"
                        pnl = (price - pos["entry"]) * pos["qty"]
                        capital += pnl
                        log_trade(stock, "AUTO-EXIT", pos["entry"], price, result, capital, "Market Close", pos.get("reason", "N/A"))
                        pos["closed"] = True
                except Exception as e:
                    print(f"‚ùå Exit failed for {stock}: {e}")
            break

        if stop_loss_count >= MAX_STOP_LOSSES:
            print("\nüõë Max SLs hit for the day. Stopping all trades.")
            break

        if trade_count >= MAX_TRADES_PER_DAY:
            print("\nüõë Max trades reached for the day. Stopping further entries.")
            break

        nifty_trend = get_nifty_trend()
        if nifty_trend is None:
            print("‚ö†Ô∏è Skipping trades: Could not determine Nifty trend.")
            time.sleep(60)
            continue

        for stock in STOCKS:
            if stock in open_positions and open_positions[stock].get("active"):
                price, _, _ = get_market_data(stock)
                pos = open_positions[stock]

                if price >= pos["target"]:
                    print(f"üéØ Target hit for {stock} at ‚Çπ{price}")
                    place_order(stock, "SELL", pos["qty"], price)
                    pnl = (price - pos["entry"]) * pos["qty"]
                    capital += pnl
                    log_trade(stock, "EXIT-TARGET", pos["entry"], price, "WIN", capital, "Target Hit", pos.get("reason", "N/A"))
                    pos["closed"] = True
                    continue

                if price <= pos["sl"]:
                    print(f"üõë SL hit for {stock} at ‚Çπ{price}")
                    place_order(stock, "SELL", pos["qty"], price)
                    pnl = (price - pos["entry"]) * pos["qty"]
                    capital += pnl
                    stop_loss_count += 1
                    loss_today += abs(pnl)
                    log_trade(stock, "EXIT-SL", pos["entry"], price, "LOSS", capital, "Stop Loss Hit", pos.get("reason", "N/A"))
                    pos["closed"] = True
                    continue

                new_trail_sl = price * (1 - TRAIL_SL_PERCENT)
                if new_trail_sl > pos["sl"]:
                    print(f"üìà Trailing SL moved for {stock}: ‚Çπ{pos['sl']} ‚Üí ‚Çπ{new_trail_sl:.2f}")
                    pos["sl"] = new_trail_sl
                continue

            for strategy_func in strategy_functions:
                if not callable(strategy_func):
                    continue
                signal = strategy_func(stock)
                if signal:
                    if signal["action"] == "BUY" and nifty_trend != "UP":
                        print(f"‚ö†Ô∏è {stock} signal skipped: Not aligned with Nifty trend ({nifty_trend})")
                        continue

                    print(f"\nüìå {stock} signal from {signal['reason']}")
                    if place_order(stock, signal["action"], signal["qty"], signal["entry"]):
                        signal["active"] = True
                        signal["opened_at"] = datetime.now()
                        open_positions[stock] = signal
                        trade_count += 1

                        file_exists = os.path.isfile(ENTRY_LOG)
                        with open(ENTRY_LOG, mode='a', newline='') as file:
                            writer = csv.writer(file)
                            if not file_exists:
                                writer.writerow(["DateTime", "Stock", "Action", "Qty", "Entry Price", "SL", "Target", "Strategy"])
                            writer.writerow([
                                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                stock,
                                signal["action"],
                                signal["qty"],
                                round(signal["entry"], 2),
                                round(signal["sl"], 2),
                                round(signal["target"], 2),
                                signal["reason"]
                            ])
                    else:
                        print(f"‚ö†Ô∏è Order for {stock} not placed due to funds or issue. Skipping.")
                    break

        time.sleep(60)

except Exception as e:
    print(f"\n‚ùå Bot crashed with error: {e}")

finally:
    print("\n‚ö†Ô∏è Final cleanup: Closing any open positions...")
    for stock, pos in open_positions.items():
        if not pos.get("active") or pos.get("closed"):
            continue
        try:
            price, _, _ = get_market_data(stock)
            place_order(stock, "SELL", pos["qty"], price)
            result = "WIN" if price >= pos["entry"] else "LOSS"
            pnl = (price - pos["entry"]) * pos["qty"]
            capital += pnl
            log_trade(stock, "FORCED-EXIT", pos["entry"], price, result, capital, "Crash Exit", pos.get("reason", "N/A"))
        except Exception as e:
            print(f"‚ùå Could not close {stock}: {e}")

print("\n‚úÖ Trading bot stopped.")
